---
- name: Mediaserver setup
  hosts: mediaserver

  pre_tasks:
    - name: Set SELinux to permissive
      ansible.posix.selinux:
        policy: targeted
        state: permissive

  roles:
    - name: Install and configure Tailscale
      role: artis3n.tailscale
      tailscale_args: "--ssh"
      vars:
        tailscale_authkey: "{{ lookup('community.general.onepassword', 'ts-authkey-server', field='credential', vault='prod', service_account_token=service_account_token) }}"
      state: present

    - name: Install Docker
      role: geerlingguy.docker
      vars:
        docker_edition: ce
        docker_yum_repo_enable_test: 0
        docker_yum_repo_enable_nightly: 0
        docker_packages_state: present
        docker_install_compose_plugin: true
        docker_compose_package: docker-compose-plugin
        docker_compose_package_state: present
        docker_install_compose: false
        docker_users:
          - sebastian
        docker_service_manage: true
        docker_service_state: started
        docker_service_enabled: true
        docker_restart_handler_state: restarted

  tasks:
    - name: Set hostname
      ansible.builtin.hostname:
        name: mediaserver
        use: systemd

    - name: Ensure 'sebastian' user exists
      ansible.builtin.user:
        name: sebastian
        shell: /bin/bash
        group: sebastian
        groups: wheel,docker
        append: true
        state: present

    - name: SSH authorized key for 'sebastian'
      ansible.posix.authorized_key:
        user: sebastian
        key: "{{ lookup('community.general.onepassword', '', field='public key', vault='Private', service_account_token=service_account_token) }}"
        state: present

    - name: Add cloudflared repository
      ansible.builtin.yum_repository:
        name: cloudflared-stable
        description: cloudflared-stable repository
        baseurl: https://pkg.cloudflare.com/cloudflared/rpm
        gpgcheck: true
        gpgkey: https://pkg.cloudflare.com/cloudflare-ascii-pubkey.gpg
        state: present

    - name: Upgrade all packages  # noqa package-latest
      ansible.builtin.dnf:
        name: "*"
        state: latest

    - name: Install misc packages
      ansible.builtin.dnf:
        name:
          - wget
          - curl
          - certbot
          - certbot-dns-cloudflare
          - cloudflared
          - nfs-utils
          - python3-pip
        state: present

    - name: Enable 'cloudflared' service
      ansible.builtin.command:
        cmd: cloudflared service install {{ lookup('community.general.onepassword', 'cf-tunnel-hogsmeade-mediaserver', field='credential', vault='prod', service_account_token=service_account_token) }}
        creates: /etc/systemd/system/cloudflared.service

    - name: Add cloudflare_api_key for certbot plugin
      ansible.builtin.lineinfile:
        path: /etc/letsencrypt/cloudflare.ini
        regexp: '^dns_cloudflare_api_token'
        line: "dns_cloudflare_api_token = {{ lookup('community.general.onepassword', 'cloudflare-dns-api-token', field='credential', vault='prod', service_account_token=service_account_token) }}"  # noqa yaml
        create: true
        mode: '0640'
        state: present

    - name: Add renew hook for Jellyfin cert
      ansible.builtin.blockinfile:
        path: /etc/letsencrypt/renewal-hooks/deploy/jellyfin-pkcs12.sh
        block: |
          #!/bin/sh
          openssl pkcs12 -export -password pass:{{ lookup('community.general.onepassword', 'jellyfin_pkcs12_cert_password', field='password', vault='prod') }} -out /docker/jellyfin/certs/hogsmeade.pfx -inkey /etc/letsencrypt/live/hogsmeade.hogwarts.zone/privkey.pem -in /etc/letsencrypt/live/hogsmeade.hogwarts.zone/cert.pem
        create: true
        mode: '0750'
        state: present

    - name: Obtain cert for Jellyfin
      ansible.builtin.command:
        cmd: certbot certonly --agree-tos -m sebastian.danielsson@proton.me --dns-cloudflare --dns-cloudflare-credentials /etc/letsencrypt/cloudflare.ini --key-type ecdsa --elliptic-curve secp384r1 --rsa-key-size 4096 --staple-ocsp true --hsts true --uir true --must-staple true -d hogsmeade.hogwarts.zone --deploy-hook /etc/letsencrypt/renewal-hooks/deploy/jellyfin-pkcs12.sh
        creates: /etc/letsencrypt/live/hogsmeade.hogwarts.zone/fullchain.pem

    - name: Mount media share
      ansible.posix.mount:
        src: 192.168.1.116:/chungus/media
        path: /mnt/chungus/media
        fstype: nfs
        opts: defaults
        dump: 0
        passno: 0
        state: mounted

    - name: Synchronize docker files
      ansible.posix.synchronize:
        src: ../docker/
        dest: /docker/
        archive: true
        delete: true
        owner: false
        group: false
        mode: push
        rsync_opts:
          - "--exclude=.DS_Store"

    - name: Init a new swarm with default parameters
      community.docker.docker_swarm:
        state: present

    - name: Create secret cf_dns_api_token for Traefik
      community.docker.docker_secret:
        name: cf_dns_api_token
        data: "{{ lookup('community.general.onepassword', 'cloudflare-dns-api-token', field='credential', vault='prod', service_account_token=service_account_token) }}"
        state: present

    - name: Create secret plausible_postgres_password
      community.docker.docker_secret:
        name: plausible_postgres_password
        data: "{{ lookup('community.general.onepassword', 'Plausible Container Secrets', field='plausible_postgres_password', vault='prod', service_account_token=service_account_token) }}"
        state: present

    - name: Create secret plausible_secret_key_base
      community.docker.docker_secret:
        name: plausible_secret_key_base
        data: "{{ lookup('community.general.onepassword', 'Plausible Container Secrets', field='plausible_secret_key_base', vault='prod') }}"
        state: present

    - name: Create secret plausible_google_client_id
      community.docker.docker_secret:
        name: plausible_google_client_id
        data: "{{ lookup('community.general.onepassword', 'Plausible Container Secrets', field='plausible_google_client_id', vault='prod') }}"
        state: present

    - name: Create secret plausible_google_client_secret
      community.docker.docker_secret:
        name: plausible_google_client_secret
        data: "{{ lookup('community.general.onepassword', 'Plausible Container Secrets', field='plausible_google_client_secret', vault='prod') }}"
        state: present

    - name: Create secret plausible_mailer_email
      community.docker.docker_secret:
        name: plausible_mailer_email
        data: "{{ lookup('community.general.onepassword', 'Plausible Container Secrets', field='plausible_mailer_email', vault='prod') }}"
        state: present

    - name: Create secret plausible_smtp_host_addr
      community.docker.docker_secret:
        name: plausible_smtp_host_addr
        data: "{{ lookup('community.general.onepassword', 'Plausible Container Secrets', field='plausible_smtp_host_addr', vault='prod') }}"
        state: present

    - name: Create secret plausible_smtp_user_name
      community.docker.docker_secret:
        name: plausible_smtp_user_name
        data: "{{ lookup('community.general.onepassword', 'Plausible Container Secrets', field='plausible_smtp_user_name', vault='prod') }}"
        state: present

    - name: Create secret plausible_smtp_user_pwd
      community.docker.docker_secret:
        name: plausible_smtp_user_pwd
        data: "{{ lookup('community.general.onepassword', 'Plausible Container Secrets', field='plausible_smtp_user_pwd', vault='prod') }}"
        state: present

    - name: Create secret transmission_user
      community.docker.docker_secret:
        name: transmission_user
        data: "{{ lookup('community.general.onepassword', 'Transmission Container Secrets', field='transmission_user', vault='prod') }}"
        state: present

    - name: Create secret transmission_pass
      community.docker.docker_secret:
        name: transmission_pass
        data: "{{ lookup('community.general.onepassword', 'Transmission Container Secrets', field='transmission_pass', vault='prod') }}"
        state: present

    - name: Create network medianet
      community.docker.docker_network:
        name: medianet
        driver: overlay
        attachable: true
        state: present

    - name: Create network wgnet
      community.docker.docker_network:
        name: wgnet
        driver: bridge
        ipam_config:
          - subnet: 172.100.0.0/24
            gateway: 172.100.0.1
        attachable: true
        state: present

    - name: Add community.docker.docker_compose dependencies
      ansible.builtin.pip:
        name:
          - pyyaml
          - jsondiff
          - docker
          - docker-compose
        state: present

    - name: Deploy Portainer
      community.docker.docker_stack:
        name: portainer
        compose:
          - /docker/portainer/compose.yaml
        state: present

    - name: Deploy Radarr
      community.docker.docker_stack:
        name: radarr
        compose:
          - /docker/radarr/compose.yaml
        state: present

    - name: Deploy Sonarr
      community.docker.docker_stack:
        name: sonarr
        compose:
          - /docker/sonarr/compose.yaml
        state: present

    - name: Deploy Jellyfin
      community.docker.docker_stack:
        name: jellyfin
        compose:
          - /docker/jellyfin/compose.yaml
        state: present

    - name: Deploy transmission-wireguard
      community.docker.docker_compose:
        project_src: /docker/transmission-wireguard
        pull: true
        state: present

    - name: Deploy Plausible
      community.docker.docker_stack:
        name: plausible
        compose:
          - /docker/plausible/compose.yaml
        state: absent

    - name: Deploy Traefik
      community.docker.docker_stack:
        name: traefik
        compose:
          - /docker/traefik/compose.yaml
        state: absent
