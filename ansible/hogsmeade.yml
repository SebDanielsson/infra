---
- name: Hogsmeade Proxmox
  hosts: hogsmeade
  vars:
    cloudflare_dns_api_token: "{{ lookup('env', 'CLOUDFLARE_DNS_API_TOKEN') }}"
    jellyfin_email: "{{ lookup('env', 'CERTBOT_EMAIL') }}"

    jellyfin_domain: "{{ lookup('env', 'JELLYFIN_DOMAIN') }}"
    jellyfin_pkcs12_password: "{{ lookup('env', 'JELLYFIN_PKCS12_PASSWORD') }}"

    venv_path: ~/python_docker/venv
    ansible_python_interpreter: "~/python_docker/venv/bin/python"

  tasks:
    - name: Add vector repository
      ansible.builtin.deb822_repository:
        name: vector
        types: deb
        uris: https://repositories.timber.io/public/vector/deb/debian
        suites: "{{ ansible_distribution_release }}"
        components: main
        signed_by: https://repositories.timber.io/public/vector/gpg.3543DB2D0A2BC4B8.key
        state: present

    - name: Install vector for Logto logging
      ansible.builtin.apt:
        name:
          - vector
        state: present

    - name: Start and enable vector
      ansible.builtin.service:
        name: vector
        enabled: true
        state: started

    - name: Set hostname
      ansible.builtin.hostname:
        name: hogsmeade
        use: systemd

    - name: Install certbot and certbot-dns-cloudflare
      ansible.builtin.pip:
        name:
          - certbot
          - certbot-dns-cloudflare
        state: present
        virtualenv: ~/python_docker/venv
        virtualenv_site_packages: true

    - name: Add cloudflare_api_key for certbot plugin
      ansible.builtin.lineinfile:
        path: /etc/letsencrypt/cloudflare.ini
        regexp: "^dns_cloudflare_api_token"
        line: "dns_cloudflare_api_token = {{ cloudflare_dns_api_token }}"
        create: true
        mode: "0640"
        state: present

    - name: Add renew hook for Jellyfin cert
      ansible.builtin.blockinfile:
        path: /etc/letsencrypt/renewal-hooks/deploy/jellyfin-pkcs12.sh
        block: |
          #!/bin/sh
          mkdir -p /certs/jellyfin
          openssl pkcs12 -export -password pass:{{ jellyfin_pkcs12_password }} -out /certs/jellyfin/jellyfin.pfx -inkey /etc/letsencrypt/live/{{ jellyfin_domain }}/privkey.pem -in /etc/letsencrypt/live/{{ jellyfin_domain }}/cert.pem
          chmod 755 /certs/jellyfin/jellyfin.pfx
          chown root:docker /certs/jellyfin/jellyfin.pfx
        create: true
        mode: "0750"
        state: present

    - name: Create certbot-renew-jellyfin service
      ansible.builtin.copy:
        mode: "0644"
        dest: /etc/systemd/system/certbot-renew-jellyfin.service
        content: |
          [Unit]
          Description=Renew certificates acquired via Certbot
          Documentation=https://eff-certbot.readthedocs.io/en/stable/

          [Service]
          Type=oneshot
          ExecStart=/root/python_docker/venv/bin/certbot renew --quiet --cert-name {{ jellyfin_domain }} --deploy-hook /etc/letsencrypt/renewal-hooks/deploy/jellyfin-pkcs12.sh
          PrivateTmp=true

    - name: Create certbot-renew-jellyfin.timer
      ansible.builtin.copy:
        mode: "0644"
        dest: /etc/systemd/system/certbot-renew-jellyfin.timer
        content: |
          [Unit]
          Description=Run Certbot twice daily

          [Timer]
          OnCalendar=*-*-* 00/12:00:00
          RandomizedDelaySec=12h
          Persistent=true

          [Install]
          WantedBy=timers.target

    - name: Enable certbot-renew-jellyfin.timer
      ansible.builtin.systemd:
        name: certbot-renew-jellyfin.timer
        state: started
        enabled: true
        daemon_reload: true

    - name: Obtain cert for Jellyfin
      ansible.builtin.shell: |
        ~/python_docker/venv/bin/certbot certonly \
        --dns-cloudflare \
        --dns-cloudflare-credentials /etc/letsencrypt/cloudflare.ini \
        --email {{ jellyfin_email }} \
        --agree-tos \
        --key-type ecdsa \
        --elliptic-curve secp384r1 \
        --rsa-key-size 4096 \
        --staple-ocsp \
        --hsts \
        --uir \
        --must-staple \
        --deploy-hook /etc/letsencrypt/renewal-hooks/deploy/jellyfin-pkcs12.sh \
        --domain {{ jellyfin_domain }}
      args:
        creates: /etc/letsencrypt/live/{{ jellyfin_domain }}/fullchain.pem

    - name: Create ZFS filesystem and set sharenfs property
      community.general.zfs:
        name: chungus/media
        extra_zfs_properties:
          sharenfs: crossmnt,no_root_squash,rw=192.168.1.0/24
        state: present

    - name: Install python3-full
      ansible.builtin.apt:
        name:
          - python3-full
          - python3-virtualenv
        state: present

    - name: Install required Python packages in the virtual environment
      ansible.builtin.pip:
        name:
          - pyyaml
          - jsondiff
          - docker
          - docker-compose
          - proxmoxer
        state: present
        virtualenv: ~/python_docker/venv
        virtualenv_site_packages: true

    - name: Synchronize docker files
      ansible.posix.synchronize:
        src: ../docker/
        dest: /docker/
        archive: true
        delete: true
        owner: false
        group: false
        mode: push
        rsync_opts:
          - "--exclude=.DS_Store"

    - name: Init a new swarm with default parameters
      community.docker.docker_swarm:
        listen_addr: 0.0.0.0:2377
        advertise_addr: 192.168.1.116:2377
        state: present

    - name: Run all containers
      ansible.builtin.import_tasks: tasks/containers.yml

    # - name: Create Fedora VM
    #   ansible.builtin.import_tasks: tasks/fedora_vm.yml

  handlers:
    - name: Restart pveproxy
      ansible.builtin.service:
        name: pveproxy
        state: restarted
