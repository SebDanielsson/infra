---
- name: Configure EdgeRouter X OpenWrt
  hosts: er-x
  gather_facts: false

  vars:
    ansible_python_interpreter: /usr/bin/python3
    service_account_token: "{{ lookup('env', 'OP_SERVICE_ACCOUNT_TOKEN') }}"

  tasks:
    - name: Check if python3 is installed
      ansible.builtin.raw: which python3
      changed_when: false
      failed_when: python_check.rc not in [0, 1]
      register: python_check

    - name: Install python3
      ansible.builtin.raw: opkg update && opkg install python3
      when: python_check.rc != 0
      register: opkg_install_python3
      changed_when: '"installed in root is up to date" not in opkg_install_python3.stdout'

    - name: End the play if python3 was not installed previously
      ansible.builtin.meta: end_host
      when:
      - python_check.rc != 0

    - name: Gather facts
      ansible.builtin.setup:

    - name: Install packages
      community.general.opkg:
        name:
          - shadow-useradd
          - shadow-usermod
          - shadow-groupadd
          - shadow-groupmod
          - sudo
          - coreutils-comm
          - coreutils-od
          - coreutils-sort
          - coreutils-stty
          - bash
          - openssh-sftp-server
          - luci-app-https-dns-proxy
          - luci-app-acme
          - luci-proto-wireguard
          - tailscale
          - iptables-nft
        update_cache: true
        state: present

    - name: Enable and start service https-dns-proxy
      community.general.openwrt_init:
        name: https-dns-proxy
        enabled: true
        state: started

    - name: Enable and start service tailscale
      community.general.openwrt_init:
        name: tailscale
        enabled: true
        state: started

    - name: Check Tailscale status
      ansible.builtin.shell: tailscale status
      register: tailscale_status
      changed_when: false
      check_mode: no
      failed_when: tailscale_status.rc not in [0, 1]

    - name: Login to Tailscale
      ansible.builtin.shell: tailscale up --netfilter-mode=off --ssh --authkey "{{ lookup('community.general.onepassword', 'ts-authkey-router', field='credential', vault='prod', service_account_token=service_account_token) }}"
      when: '"Logged out" in tailscale_status.stdout'

    - name: Create group 'sudo'
      ansible.builtin.group:
        name: sudo
        state: present

    - name: Ensure user 'sebastian' exists
      ansible.builtin.user:
        name: sebastian
        groups:
          - sudo
        shell: /bin/bash
        createhome: yes
        state: present

    - name: Add group 'sudo' to sudoers
      community.general.sudoers:
        name: sudo-group
        commands: ALL
        group: sudo
        state: present

    - name: SSH authorized key for 'root'
      ansible.posix.authorized_key:
        user: root
        key: "{{ lookup('community.general.onepassword', 'Sebastian SSH Public Key', field='public key', vault='prod', service_account_token=service_account_token) }}"  # noqa: E501
        state: present

    - name: SSH authorized key for 'sebastian'
      ansible.posix.authorized_key:
        user: sebastian
        key: "{{ lookup('community.general.onepassword', 'Sebastian SSH Public Key', field='public key', vault='prod', service_account_token=service_account_token) }}"  # noqa: E501
        state: present
